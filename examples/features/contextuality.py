# examples/features/contextuality.py

"""
ðŸ“Œ Feature: Contextuality
-------------------------
This example demonstrates how the EvrmoreClient adapts seamlessly to both
synchronous and asynchronous execution contexts.

You can use the same client interface in regular (sync) scripts or async
coroutines â€” no need to instantiate different classes or switch APIs.

This is ideal for:
- building apps that use both sync and async logic (e.g., CLI + event loop)
- transitioning from sync to async without refactoring
- libraries that want to be agnostic of the caller's context

âœ… No wrappers
âœ… No separate client classes
âœ… One consistent API surface

Â© 2025 Manticore Technologies, LLC
Maintained by: Cymos (EfletL7gMLYkuu9CfHcRevVk3KdnG5JgruSE)
"""

# â”€â”€â”€ Imports â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
from evrmore_rpc import EvrmoreClient
import asyncio

# â”€â”€â”€ Synchronous Usage â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# Create a standard EvrmoreClient (defaults to loading from evrmore.conf)
sync_client = EvrmoreClient()

# Use the client in a blocking (synchronous) way
print("ðŸ§  Synchronous context:")
block_height = sync_client.getblockcount()
print(f"  ðŸ”¹ Current block height: {block_height}")

# â”€â”€â”€ Asynchronous Usage â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# The exact same EvrmoreClient works in an async coroutine
async def async_method():
    async_client = EvrmoreClient()

    print("âš¡ Asynchronous context:")
    async_block_height = await async_client.getblockcount()
    print(f"  ðŸ”¹ Current block height: {async_block_height}")

# Run the async example
asyncio.run(async_method())

"""
ðŸŽ¯ Output:
ðŸ§  Synchronous context:
  ðŸ”¹ Current block height: 1316428
âš¡ Asynchronous context:
  ðŸ”¹ Current block height: 1316428

The sync and async calls use the same internal RPC adapter,
but the client detects your context at call-time and adapts accordingly.
"""
